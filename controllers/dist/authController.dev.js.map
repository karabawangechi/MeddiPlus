{"version":3,"sources":["authController.js"],"names":["User","require","bcrypt","exports","getAllUsers","req","res","find","users","json","console","error","status","message","signup","body","name","email","password","location","phone","insurancecover","findOne","existingUser","genSalt","salt","hash","hashedPassword","newUser","save","login","user","compare","isMatch","session","userId","_id"],"mappings":"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","sourcesContent":["const User = require('../models/user');\r\nconst bcrypt = require('bcryptjs');\r\n\r\n// User signup\r\n//const User = require('../models/user');\r\n\r\n// Get all users\r\nexports.getAllUsers = async (req, res) => {\r\n  try {\r\n    const users = await User.find();\r\n    res.json(users);\r\n  } catch (err) {\r\n    console.error(err);\r\n    res.status(500).json({ message: 'Server Error' });\r\n  }\r\n};\r\nexports.signup = async (req, res) => {\r\n  const { name, email, password,location,phone,insurancecover } = req.body;\r\n\r\n  try {\r\n    // Check if the user already exists\r\n    const existingUser = await User.findOne({ email });\r\n    if (existingUser) {\r\n      return res.status(400).json({ message: 'User already exists' });\r\n    }\r\n\r\n    // Hash the password\r\n    const salt = await bcrypt.genSalt(10);\r\n    const hashedPassword = await bcrypt.hash(password, salt);\r\n\r\n\r\n    \r\n    // Create a new user\r\n    const newUser = new User({ name, email,location,phone,insurancecover, password: hashedPassword });\r\n    await newUser.save();\r\n\r\n    res.json({ message: 'User created successfully' });\r\n  } catch (err) {\r\n    console.error(err);\r\n    res.status(500).json({ message: 'Server Error' });\r\n  }\r\n};\r\n\r\n// User login\r\nexports.login = async (req, res) => {\r\n  const { email, password } = req.body;\r\n\r\n  try {\r\n    // Check if the user exists\r\n    const user = await User.findOne({ email });\r\n    if (!user) {\r\n      return res.status(400).json({ message: 'Invalid credentials' });\r\n    }\r\n\r\n    // Check if the password is correct\r\n    const isMatch = await bcrypt.compare(password, user.password);\r\n    if (!isMatch) {\r\n      return res.status(400).json({ message: 'Invalid credentials' });\r\n    }\r\n\r\n    // User is authenticated, set the session\r\n    req.session.userId = user._id;\r\n    res.json({ message: 'Login successful' });\r\n  } catch (err) {\r\n    console.error(err);\r\n    res.status(500).json({ message: 'Server Error' });\r\n  }\r\n};"],"file":"authController.dev.js"}