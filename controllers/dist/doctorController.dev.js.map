{"version":3,"sources":["doctorController.js"],"names":["Doc","require","exports","getAllDoc","req","res","User","find","users","json","console","error","status","message","signup","body","name","email","password","location","phone","insurancecover","findOne","existingDoc","bcrypt","genSalt","salt","hash","hashedPassword","newDoc","save","login","user","compare","isMatch","session","userId","_id"],"mappings":"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","sourcesContent":["const Doc = require('../models/doctors');\r\n//const bcrypt = require('bcryptjs');\r\n\r\n// User signup\r\n//const User = require('../models/user');\r\n\r\n// Get all users\r\nexports.getAllDoc = async (req, res) => {\r\n  try {\r\n    const users = await User.find();\r\n    res.json(users);\r\n  } catch (err) {\r\n    console.error(err);\r\n    res.status(500).json({ message: 'Server Error' });\r\n  }\r\n};\r\nexports.signup = async (req, res) => {\r\n  const { name, email, password,location,phone,insurancecover } = req.body;\r\n\r\n  try {\r\n    // Check if the user already exists\r\n    const existingDoc = await Doc.findOne({ email });\r\n    if (existingDoc) {\r\n      return res.status(400).json({ message: 'User already exists' });\r\n    }\r\n\r\n    // Hash the password\r\n    const salt = await bcrypt.genSalt(10);\r\n    const hashedPassword = await bcrypt.hash(password, salt);\r\n\r\n\r\n    \r\n    // Create a new user\r\n    const newDoc = new Doc({ name, email,location,phone,insurancecover, password: hashedPassword });\r\n    await newDoc.save();\r\n\r\n    res.json({ message: 'User created successfully' });\r\n  } catch (err) {\r\n    console.error(err);\r\n    res.status(500).json({ message: 'Server Error' });\r\n  }\r\n};\r\n\r\n// User login\r\nexports.login = async (req, res) => {\r\n  const { email, password } = req.body;\r\n\r\n  try {\r\n    // Check if the user exists\r\n    const user = await User.findOne({ email });\r\n    if (!user) {\r\n      return res.status(400).json({ message: 'Invalid credentials' });\r\n    }\r\n\r\n    // Check if the password is correct\r\n    const isMatch = await bcrypt.compare(password, user.password);\r\n    if (!isMatch) {\r\n      return res.status(400).json({ message: 'Invalid credentials' });\r\n    }\r\n\r\n    // User is authenticated, set the session\r\n    req.session.userId = user._id;\r\n    res.json({ message: 'Login successful' });\r\n  } catch (err) {\r\n    console.error(err);\r\n    res.status(500).json({ message: 'Server Error' });\r\n  }\r\n};"],"file":"doctorController.dev.js"}