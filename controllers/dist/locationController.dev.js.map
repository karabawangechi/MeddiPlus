{"version":3,"sources":["locationController.js"],"names":["axios","require","User","exports","detectUserLocation","req","res","phoneNumber","body","phone","post","considerIp","wifiAccessPoints","cellTowers","cellId","locationAreaCode","mobileCountryCode","mobileNetworkCode","age","signalStrength","timingAdvance","headers","response","data","location","lat","lng","findOneAndUpdate","coordinates","user","status","json","message","console","error"],"mappings":";;AAAA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,IAAMC,IAAI,GAAGD,OAAO,CAAC,gBAAD,CAApB;;AAEAE,OAAO,CAACC,kBAAR,GAA6B,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AACrBC,UAAAA,WADqB,GACPF,GAAG,CAACG,IAAJ,CAASC,KADF,EACS;;AADT;AAAA;AAAA,0CAKFT,KAAK,CAACU,IAAN,CAAW,qDAAX,EAAkE;AACvFC,YAAAA,UAAU,EAAE,KAD2E;AAEvFC,YAAAA,gBAAgB,EAAE,EAFqE;AAGvFC,YAAAA,UAAU,EAAE,CACV;AACEC,cAAAA,MAAM,EAAE,KADV;AACiB;AACfC,cAAAA,gBAAgB,EAAE,KAFpB;AAGEC,cAAAA,iBAAiB,EAAE,GAHrB;AAIEC,cAAAA,iBAAiB,EAAE,SAJrB;AAKEC,cAAAA,GAAG,EAAE,CALP;AAMEC,cAAAA,cAAc,EAAE,CAAC,EANnB;AAOEC,cAAAA,aAAa,EAAE;AAPjB,aADU;AAH2E,WAAlE,EAcpB;AACDC,YAAAA,OAAO,EAAE;AACP,8BAAgB,kBADT;AAEP,+BAAiB,yCAFV,CAEoD;;AAFpD;AADR,WAdoB,CALE;;AAAA;AAKnBC,UAAAA,QALmB;AAAA,kCA0BJA,QAAQ,CAACC,IAAT,CAAcC,QA1BV,EA0BjBC,GA1BiB,yBA0BjBA,GA1BiB,EA0BZC,GA1BY,yBA0BZA,GA1BY,EA4BzB;;AA5ByB;AAAA,0CA6BNxB,IAAI,CAACyB,gBAAL,CAAsB;AAAElB,YAAAA,KAAK,EAAEF;AAAT,WAAtB,EAA8C;AAC/DiB,YAAAA,QAAQ,EAAE;AACRI,cAAAA,WAAW,EAAE,CAACF,GAAD,EAAMD,GAAN;AADL;AADqD,WAA9C,EAIhB;AAAE,mBAAK;AAAP,WAJgB,CA7BM;;AAAA;AA6BnBI,UAAAA,IA7BmB;;AAAA,cAmCpBA,IAnCoB;AAAA;AAAA;AAAA;;AAAA,2CAoChBvB,GAAG,CAACwB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CApCgB;;AAAA;AAuCzB1B,UAAAA,GAAG,CAACyB,IAAJ,CAAS;AAAEC,YAAAA,OAAO,EAAE,oCAAX;AAAiDR,YAAAA,QAAQ,EAAEK,IAAI,CAACL,QAAL,CAAcI;AAAzE,WAAT;AAvCyB;AAAA;;AAAA;AAAA;AAAA;AAyCzBK,UAAAA,OAAO,CAACC,KAAR;AACA5B,UAAAA,GAAG,CAACwB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB;;AA1CyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA7B","sourcesContent":["const axios = require('axios');\r\nconst User = require('../models/user');\r\n\r\nexports.detectUserLocation = async (req, res) => {\r\n  const phoneNumber = req.body.phone; // Get the phone number from the request body\r\n\r\n  try {\r\n    // Make a request to the Google Maps Geolocation API\r\n    const response = await axios.post('https://www.googleapis.com/geolocation/v1/geolocate', {\r\n      considerIp: false,\r\n      wifiAccessPoints: [],\r\n      cellTowers: [\r\n        {\r\n          cellId: 12345, // Replace with appropriate cell tower information\r\n          locationAreaCode: 67890,\r\n          mobileCountryCode: 254,\r\n          mobileNetworkCode: 769362302,\r\n          age: 0,\r\n          signalStrength: -60,\r\n          timingAdvance: 15,\r\n        },\r\n      ],\r\n    }, {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': 'AIzaSyCqVGnU-dhnEsiLy2bFs89d4w349Xt6CQI' // Replace 'YOUR_API_KEY' with your actual API key\r\n      },\r\n    });\r\n\r\n    const { lat, lng } = response.data.location;\r\n\r\n    // Find the user by phone number and update their location\r\n    const user = await User.findOneAndUpdate({ phone: phoneNumber }, {\r\n      location: {\r\n        coordinates: [lng, lat],\r\n      },\r\n    }, { new: true });\r\n\r\n    if (!user) {\r\n      return res.status(404).json({ message: 'User not found' });\r\n    }\r\n\r\n    res.json({ message: 'User location updated successfully', location: user.location.coordinates });\r\n  } catch (err) {\r\n    console.error(err);\r\n    res.status(500).json({ message: 'Server Error' });\r\n  }\r\n};"],"file":"locationController.dev.js"}