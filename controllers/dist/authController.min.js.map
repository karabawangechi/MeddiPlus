{"version":3,"sources":["authController.js"],"names":["User","require","bcrypt","exports","getAllUsers","req","res","users","regeneratorRuntime","async","_context","prev","next","awrap","find","sent","json","t0","console","error","status","message","stop","signup","_req$body","name","email","password","location","phone","insurancecover","salt","hashedPassword","newUser","_context2","body","findOne","abrupt","genSalt","hash","save","login","_req$body2","user","_context3","compare","session","userId","_id"],"mappings":"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","file":"authController.min.js","sourcesContent":["const User = require('../models/user');\r\nconst bcrypt = require('bcryptjs');\r\n\r\n// User signup\r\n//const User = require('../models/user');\r\n\r\n// Get all users\r\nexports.getAllUsers = async (req, res) => {\r\n  try {\r\n    const users = await User.find();\r\n    res.json(users);\r\n  } catch (err) {\r\n    console.error(err);\r\n    res.status(500).json({ message: 'Server Error' });\r\n  }\r\n};\r\nexports.signup = async (req, res) => {\r\n  const { name, email, password,location,phone,insurancecover } = req.body;\r\n\r\n  try {\r\n    // Check if the user already exists\r\n    const existingUser = await User.findOne({ email });\r\n    if (existingUser) {\r\n      return res.status(400).json({ message: 'User already exists' });\r\n    }\r\n\r\n    // Hash the password\r\n    const salt = await bcrypt.genSalt(10);\r\n    const hashedPassword = await bcrypt.hash(password, salt);\r\n\r\n\r\n    \r\n    // Create a new user\r\n    const newUser = new User({ name, email,location,phone,insurancecover, password: hashedPassword });\r\n    await newUser.save();\r\n\r\n    res.json({ message: 'User created successfully' });\r\n  } catch (err) {\r\n    console.error(err);\r\n    res.status(500).json({ message: 'Server Error' });\r\n  }\r\n};\r\n\r\n// User login\r\nexports.login = async (req, res) => {\r\n  const { email, password } = req.body;\r\n\r\n  try {\r\n    // Check if the user exists\r\n    const user = await User.findOne({ email });\r\n    if (!user) {\r\n      return res.status(400).json({ message: 'Invalid credentials' });\r\n    }\r\n\r\n    // Check if the password is correct\r\n    const isMatch = await bcrypt.compare(password, user.password);\r\n    if (!isMatch) {\r\n      return res.status(400).json({ message: 'Invalid credentials' });\r\n    }\r\n\r\n    // User is authenticated, set the session\r\n    req.session.userId = user._id;\r\n    res.json({ message: 'Login successful' });\r\n  } catch (err) {\r\n    console.error(err);\r\n    res.status(500).json({ message: 'Server Error' });\r\n  }\r\n};"]}