{"version":3,"sources":["doctorController.js"],"names":["Doc","require","exports","getAllDoc","req","res","users","regeneratorRuntime","async","_context","prev","next","awrap","User","find","sent","json","t0","console","error","status","message","stop","signup","_req$body","name","email","password","location","phone","insurancecover","salt","hashedPassword","newDoc","_context2","body","findOne","abrupt","bcrypt","genSalt","hash","save","login","_req$body2","user","_context3","compare","existingDoc","session","userId","_id"],"mappings":"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","file":"doctorController.min.js","sourcesContent":["const Doc = require('../models/doctors');\r\n//const bcrypt = require('bcryptjs');\r\n\r\n// User signup\r\n//const User = require('../models/user');\r\n\r\n// Get all users\r\nexports.getAllDoc = async (req, res) => {\r\n  try {\r\n    const users = await User.find();\r\n    res.json(users);\r\n  } catch (err) {\r\n    console.error(err);\r\n    res.status(500).json({ message: 'Server Error' });\r\n  }\r\n};\r\nexports.signup = async (req, res) => {\r\n  const { name, email, password,location,phone,insurancecover } = req.body;\r\n\r\n  try {\r\n    // Check if the user already exists\r\n    const existingDoc = await Doc.findOne({ email });\r\n    if (existingDoc) {\r\n      return res.status(400).json({ message: 'User already exists' });\r\n    }\r\n\r\n    // Hash the password\r\n    const salt = await bcrypt.genSalt(10);\r\n    const hashedPassword = await bcrypt.hash(password, salt);\r\n\r\n\r\n    \r\n    // Create a new user\r\n    const newDoc = new Doc({ name, email,location,phone,insurancecover, password: hashedPassword });\r\n    await newDoc.save();\r\n\r\n    res.json({ message: 'User created successfully' });\r\n  } catch (err) {\r\n    console.error(err);\r\n    res.status(500).json({ message: 'Server Error' });\r\n  }\r\n};\r\n\r\n// User login\r\nexports.login = async (req, res) => {\r\n  const { email, password } = req.body;\r\n\r\n  try {\r\n    // Check if the user exists\r\n    const user = await User.findOne({ email });\r\n    if (!user) {\r\n      return res.status(400).json({ message: 'Invalid credentials' });\r\n    }\r\n\r\n    // Check if the password is correct\r\n    const isMatch = await bcrypt.compare(password, user.password);\r\n    if (!isMatch) {\r\n      return res.status(400).json({ message: 'Invalid credentials' });\r\n    }\r\n\r\n    // User is authenticated, set the session\r\n    req.session.userId = user._id;\r\n    res.json({ message: 'Login successful' });\r\n  } catch (err) {\r\n    console.error(err);\r\n    res.status(500).json({ message: 'Server Error' });\r\n  }\r\n};"]}