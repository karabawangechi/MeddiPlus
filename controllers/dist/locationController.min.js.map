{"version":3,"sources":["locationController.js"],"names":["axios","require","User","exports","detectUserLocation","req","res","phoneNumber","response","_response$data$locati","lat","lng","user","regeneratorRuntime","async","_context","prev","next","body","phone","awrap","post","considerIp","wifiAccessPoints","cellTowers","locationAreaCode","mobileCountryCode","mobileNetworkCode","age","sent","data","location","findOneAndUpdate","coordinates","new","abrupt","json","message","t0","status","stop"],"mappings":"aAAA,IAAMA,MAAQC,QAAQ,SAChBC,KAAOD,QAAQ,kBAErBE,QAAQC,mBAAqB,SAAOC,EAAKC,GAAZ,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAFnBV,EAAWF,EAAAa,KAAAC,MAEQJ,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAAAJ,mBAAAO,MAKFpB,MAAMqB,KAAK,sDAAuD,CALhEC,YAAA,EAAAC,iBAAA,GAAAC,WAAA,CAAA,CACrBjB,OAAAA,MAUEkB,iBAAkB,MAXCC,kBAAA,IAAAC,kBAAA,UAAAC,IAAA,EAMvBN,gBAAY,GACZC,cAAAA,MAGmB,CACfE,QAAAA,CACAC,eAAAA,mBACAC,cAAAA,8CAbmB,KAAA,EAAA,OAKnBnB,EALmBO,EAAAc,KAAApB,EAQXD,EAAAsB,KAAAC,SACVrB,EATqBD,EASrBC,IADUC,EARWF,EAQXE,IARWI,EAAAE,KAAA,EAAAJ,mBAAAO,MAqBrBlB,KAAA8B,iBAAgB,CAAAb,MADTZ,GAAA,CAEPwB,SAAA,CASAE,YAAa,CAACtB,EAAKD,KAZpB,CAAAwB,KAnBsB,KAAA,KAAA,EAAA,GAqBrBtB,EArBqBG,EAAAc,KAAA,CAAAd,EAAAE,KAAA,GAAA,MAAA,OAAAF,EAAAoB,OAAA,SAKnB3B,EAAAA,OALmB,KAAA4B,KAAA,CAAAC,QAAA,oBAAA,KAAA,GAAA/B,EAAA8B,KAAA,CAAAC,QAAA,qCAAAN,SAAAnB,EAAAmB,SAAAE,cAAAlB,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAF,EAAAC,KAAA,GAAAD,EAAAuB,GAAAvB,EAAA,MAAA,GA6BkBI,QAAAA,MAAAA,EAAAA,IAAFb,EAAAiC,OAAwB,KAAAH,KAAA,CAAAC,QAAA,iBA7BxC,KAAA,GAAA,IAAA,MAAA,OAAAtB,EAAAyB,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA","file":"locationController.min.js","sourcesContent":["const axios = require('axios');\r\nconst User = require('../models/user');\r\n\r\nexports.detectUserLocation = async (req, res) => {\r\n  const phoneNumber = req.body.phone; // Get the phone number from the request body\r\n\r\n  try {\r\n    // Make a request to the Google Maps Geolocation API\r\n    const response = await axios.post('https://www.googleapis.com/geolocation/v1/geolocate', {\r\n      considerIp: false,\r\n      wifiAccessPoints: [],\r\n      cellTowers: [\r\n        {\r\n          cellId: 12345, // Replace with appropriate cell tower information\r\n          locationAreaCode: 67890,\r\n          mobileCountryCode: 254,\r\n          mobileNetworkCode: 769362302,\r\n          age: 0,\r\n          signalStrength: -60,\r\n          timingAdvance: 15,\r\n        },\r\n      ],\r\n    }, {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': 'AIzaSyCqVGnU-dhnEsiLy2bFs89d4w349Xt6CQI' // Replace 'YOUR_API_KEY' with your actual API key\r\n      },\r\n    });\r\n\r\n    const { lat, lng } = response.data.location;\r\n\r\n    // Find the user by phone number and update their location\r\n    const user = await User.findOneAndUpdate({ phone: phoneNumber }, {\r\n      location: {\r\n        coordinates: [lng, lat],\r\n      },\r\n    }, { new: true });\r\n\r\n    if (!user) {\r\n      return res.status(404).json({ message: 'User not found' });\r\n    }\r\n\r\n    res.json({ message: 'User location updated successfully', location: user.location.coordinates });\r\n  } catch (err) {\r\n    console.error(err);\r\n    res.status(500).json({ message: 'Server Error' });\r\n  }\r\n};"]}