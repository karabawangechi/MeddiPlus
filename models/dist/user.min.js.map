{"version":3,"sources":["user.js"],"names":["mongoose","require","Schema","UserSchema","name","type","phone","String","required","unique","methods","isValidPassword","password","this","location","model","User"],"mappings":"aAAA,IAAMA,SAAWC,QAAQ,YACnBC,OAASF,SAASE,OAElBC,WAAa,IAAID,OAAO,CAF9BE,KAAMF,CAAMG,KAAGL,OAASE,UAAxB,GAEAI,MAAMH,CAAAA,KAAaI,OAAIL,UAAO,GAC5BE,MAAM,CAAAC,KAAAE,OAAAC,UAAA,EAAAC,QAAA,GAAEJ,eAAF,CAAAA,KAAAE,OAAAC,UAAA,GAAgBA,SAAQ,CAC9BF,KAAOC,OAAgBC,UAAU,GACxBH,SAAME,CAAAA,KAARA,OAAAC,UAAA,KAAAL,WAHqBO,QAAAC,gBAAA,SAAAC,GAIVP,OAAIQ,KAAEN,WAARK,GAChBE,IAAAA,KAAUd,SAAAe,MAAA,OAAAZ,YAENE,OAAAA,QAFMW","file":"user.min.js","sourcesContent":["const mongoose = require('mongoose');\r\nconst Schema = mongoose.Schema;\r\n\r\nconst UserSchema = new Schema({\r\n  name: { type: String, required: true },\r\n  phone: { type: String, required: true },\r\n  email: { type: String, required: true, unique: true },\r\n  insurancecover: { type: String, required: true },\r\n  location: {\r\n   \r\n      type: String,\r\n      \r\n      required: true\r\n   \r\n  },\r\n  password: { type: String, required: true },\r\n});\r\n\r\nUserSchema.methods.isValidPassword = function (password) {\r\n  // Simple password validation, you can replace it with your own logic\r\n  return this.password === password;\r\n};\r\n\r\nconst User = mongoose.model('User', UserSchema);\r\nmodule.exports = User;"]}