{"version":3,"sources":["med.js"],"names":["mongoose","require","Schema","MedSchema","Medname","type","String","required","Medprice","Medbrand","unique","loction","coordinates","Number","pharmacyname","methods","isValidPassword","password","Med","model","module","exports"],"mappings":";;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA,IAAMA,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AACA,IAAMC,MAAM,GAAGF,QAAQ,CAACE,MAAxB;AAEA,IAAMC,SAAS,GAAG,IAAID,MAAJ,CAAW;AAC3BE,EAAAA,OAAO,EAAE;AAAEC,IAAAA,IAAI,EAAEC,MAAR;AAAgBC,IAAAA,QAAQ,EAAE;AAA1B,GADkB;AAE3BC,EAAAA,QAAQ,EAAE;AAAEH,IAAAA,IAAI,EAAEC,MAAR;AAAgBC,IAAAA,QAAQ,EAAE;AAA1B,GAFiB;AAG3BE,EAAAA,QAAQ,EAAE;AAAEJ,IAAAA,IAAI,EAAEC,MAAR;AAAgBC,IAAAA,QAAQ,EAAE,IAA1B;AAAgCG,IAAAA,MAAM,EAAE;AAAxC,GAHiB;AAI3BC,EAAAA,OAAO,EAAE;AACPN,IAAAA,IAAI,EAAE;AACJA,MAAAA,IAAI,EAAEC,MADF;AAEJ,cAAM,CAAC,OAAD,CAFF;AAGJC,MAAAA,QAAQ,EAAE;AAHN,KADC;AAMPK,IAAAA,WAAW,EAAE;AACXP,MAAAA,IAAI,EAAE,CAACQ,MAAD,CADK;AAEX,iBAAS,CAAC,CAAD,EAAI,CAAJ;AAFE;AANN,GAJkB;AAe3BC,EAAAA,YAAY,EAAE;AAAET,IAAAA,IAAI,EAAEC,MAAR;AAAgBC,IAAAA,QAAQ,EAAE;AAA1B;AAfa,CAAX,CAAlB;;AAkBAJ,SAAS,CAACY,OAAV,CAAkBC,eAAlB,GAAoC,UAAUC,QAAV,EAAoB;AACtD;AACA,SAAO,KAAKA,QAAL,KAAkBA,QAAzB;AACD,CAHD;;AAKA,IAAMC,GAAG,GAAGlB,QAAQ,CAACmB,KAAT,CAAe,KAAf,EAAsBhB,SAAtB,CAAZ;AACAiB,MAAM,CAACC,OAAP,GAAiBH,GAAjB","sourcesContent":["// const mongoose = require('mongoose');\r\n\r\n// const Schema = mongoose.Schema;\r\n// const MedSchema = new Schema({\r\n    \r\n//     Medname:{\r\n//         type: String,\r\n//         required: true\r\n//     },\r\n//     Medprice: {\r\n//         type: String,\r\n//         required: true\r\n//     },\r\n//     Medbrand: {\r\n//         type: String,\r\n//         required: true,\r\n//         unique: true\r\n//     },\r\n    \r\n//     loction: { \r\n//         type: {String, \r\n//     enum:['Point'],\r\n\r\n        \r\n//         coordinates:{\r\n//             type:[Number],\r\n//             default:[0,0]\r\n//         }},\r\n//      // Add this line for the new field\r\n//     pharmacyname: {\r\n//         type: String,\r\n//         required: true\r\n//     },\r\n    \r\n// })\r\n// MedSchema.methods.isValidPassword = function (password) {\r\n//     // Simple password validation, you can replace it with your own logic\r\n//     return this.password === password;\r\n// };\r\n\r\n// const Med = mongoose.model('Med', MedSchema);\r\n\r\n// module.exports=Med\r\nconst mongoose = require('mongoose');\r\nconst Schema = mongoose.Schema;\r\n\r\nconst MedSchema = new Schema({\r\n  Medname: { type: String, required: true },\r\n  Medprice: { type: String, required: true },\r\n  Medbrand: { type: String, required: true, unique: true },\r\n  loction: {\r\n    type: {\r\n      type: String,\r\n      enum: ['Point'],\r\n      required: true\r\n    },\r\n    coordinates: {\r\n      type: [Number],\r\n      default: [0, 0]\r\n    }\r\n  },\r\n  pharmacyname: { type: String, required: true },\r\n});\r\n\r\nMedSchema.methods.isValidPassword = function (password) {\r\n  // Simple password validation, you can replace it with your own logic\r\n  return this.password === password;\r\n};\r\n\r\nconst Med = mongoose.model('Med', MedSchema);\r\nmodule.exports = Med;"],"file":"med.dev.js"}